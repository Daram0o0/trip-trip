아래의 조건을 모두 적용하여, 아래의 요구사항을 모두 구현할 것.
구현 결과를 체크리스트로 반환할 것.

==============================================

조건-커서룰) 아래의 커서룰을 적용하여 작업하고, 이 작업이 끝나면 해당 rules 적용 결과를 체크리스트로 반환할 것.
            - @01-common.mdc
            - @04-func.mdc

==============================================

조건-파일경로) 참고할 API  문서경로: https://main-practice.codebootcamp.co.kr/graphql
조건-파일경로) 참고할 TSX  파일경로: src/components/boards/index.tsx
조건-파일경로) 참고할 CSS  파일경로: src/components/boards/styles.module.css
조건-파일경로) 구현될 HOOK 파일경로: src/components/boards/hooks/index.binding.hook.ts
조건-파일경로) 구현될 TEST 파일경로: src/components/boards/tests/index.binding.hook.spec.ts

==============================================
[1차 핵심요구사항]
핵심요구사항) 다음의 기능을 playwright 테스트를 활용하여 TDD기반으로 구현하고, 테스트에 통과할 때까지 반복할 것.
            1) 테스트 제외 라이브러리
                - jest
                - @testing-library/react

            2) 테스트 조건
                - timeout은 설정하지 않거나, 500ms 미만으로 설정할 것.
                - /diaries 페이지가 완전히 로드된 후 테스트할 것.
                    - 페이지 로드 식별 요구사항: 고정식별자 data-testid 대기 방법
                    - 페이지 로드 식별 금지사항: networkidle 대기 방법

            3) 테스트 API 조건
                3-1) 데이터
                    - 실제데이터를 사용할 것.
                    - Mock데이터 사용하지 말 것.

                3-2) 성공시나리오
                    - API 모킹하지 말 것.
                        - 사용할 email: "a@a.aa"
                        - 사용할 password: "aaaaaaaa8"

                    - likeBoard API: Int!가 제대로 반환되는지 확인할 것

                3-3) 실패시나리오
                    - API 모킹할 것.

핵심요구사항) 현재의 모든 구조를 그대로 유지하고, 하드코딩된 Mock데이터를 제거하고, 실제 데이터를 바인딩할 것. 적용 결과를 체크리스트로 반환할 것.
            1) 라이브러리조건
                - API: 이미 설치되어있는 @tanstack/react-query를 사용할 것.
                - 이미 설치되어 있는 codegen을 사용할 것.
                - boards/하위에 graphql폴더를 만들어 사용되는 쿼리 파일을 만든 후 npm run codegen을 사용해 해당 API를 사용할 것.

            2) 바인딩 API를 적용할 것.
                1. likeBoard API
                    1-1) API명: likeBoard
                    1-2) 요청데이터: 
                        boardId: ID!
                    1-3) 응답데이터: { Int! }
                    1-4) 반환받은 결과를 해당하는 곳에 지정해 넣을 것.
                    1-5) 한 아이디 당 게시물에 하나의 좋아요만 누를 수 있을 것.
                    1-6) 페이지를 나갔다 들어와도, 눌러졌었다면, 누름 표시가 되어 있을 것(lucide-react 아이콘 사용)
                    1-7) 모든 fetch되는 Boards API에 대해서 좋아요, 싫어요 값이 최신화로 refetch되도록 할 것.
                    1-8) 이를 오늘 핫한 토립토크의 좋아요에 적용할 것.