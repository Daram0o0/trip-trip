아래의 조건을 모두 적용하여, 아래의 요구사항을 모두 구현할 것.
구현 결과를 체크리스트로 반환할 것.

==============================================

조건-커서룰) 아래의 커서룰을 적용하여 작업하고, 이 작업이 끝나면 해당 rules 적용 결과를 체크리스트로 반환할 것.
            - @01-common.mdc
            - @04-func.mdc

==============================================

조건-파일경로) 참고할 API  문서경로: https://main-practice.codebootcamp.co.kr/graphql
조건-파일경로) 참고할 TSX  파일경로: src/components/boards/index.tsx
조건-파일경로) 참고할 CSS  파일경로: src/components/boards/styles.module.css
조건-파일경로) 구현될 HOOK 파일경로: src/components/boards/hooks/index.search.hook.ts
조건-파일경로) 구현될 TEST 파일경로: src/components/boards/tests/index.search.hook.spec.ts

==============================================
[1차 핵심요구사항]
핵심요구사항) 다음의 기능을 playwright 테스트를 활용하여 TDD기반으로 구현하고, 테스트에 통과할 때까지 반복할 것.
            1) 테스트 제외 라이브러리
                - jest
                - @testing-library/react

            2) 테스트 조건
                - timeout은 설정하지 않거나, 500ms 미만으로 설정할 것.
                - /diaries 페이지가 완전히 로드된 후 테스트할 것.
                    - 페이지 로드 식별 요구사항: 고정식별자 data-testid 대기 방법
                    - 페이지 로드 식별 금지사항: networkidle 대기 방법
            
            3) 테스트 API 조건
                3-1) 데이터
                    - 실제데이터를 사용할 것.
                    - Mock데이터 사용하지 말 것.

                3-2) 성공시나리오
                    - API 모킹하지 말 것.
                        - 사용할 email: "a@a.aa"
                        - 사용할 password: "aaaaaaaa8"

                    - fetchBoards API: search 파라미터가 제대로 전달되고 결과가 필터링되어 반환되는지 확인할 것.
                    - fetchBoardsCount API: search 파라미터가 제대로 전달되고 결과가 필터링되어 반환되는지 확인할 것.

                3-3) 실패시나리오
                    - API 모킹할 것.

핵심요구사항) 현재의 모든 구조를 그대로 유지하고, 검색 기능을 구현할 것. 적용 결과를 체크리스트로 반환할 것.
            1) 라이브러리조건
                - API: 이미 설치되어있는 @tanstack/react-query를 사용할 것.
                - 이미 설치되어 있는 codegen을 사용할 것.
                - boards/하위에 graphql폴더를 만들어 사용되는 쿼리 파일을 만든 후 npm run codegen을 사용해 해당 API를 사용할 것.

            2) 검색 기능을 적용할 것.
                1. Searchbar 컴포넌트
                    1-1) 검색어 입력 시 상태값으로 관리할 것.
                    1-2) 검색어는 제목 검색에 사용할 것.
                    1-3) 검색어는 공백일 수 있음. 공백일 경우 전체 조회할 것.

                2. DatePicker 컴포넌트
                    2-1) 시작일과 종료일을 선택할 수 있도록 구현할 것.
                    2-2) 시작일과 종료일은 선택적으로 필터링에 사용할 것.
                    2-3) 날짜가 선택되지 않을 경우 전체 기간 조회할 것.

                3. 검색 버튼
                    3-1) 검색 버튼 클릭 시 검색어와 날짜 범위를 fetchBoards, fetchBoardsCount API에 전달할 것.
                    3-2) 검색 실행 시 첫 페이지로 이동할 것.
                    3-3) 검색 결과에 따라 게시물 목록과 페이지네이션이 업데이트될 것.

                4. fetchBoards API
                    4-1) API명: fetchBoards
                    4-2) 요청데이터: 
                        endDate: DateTime (선택적)
                        startDate: DateTime (선택적)
                        search: String (선택적)
                        page: Int
                    4-3) 응답데이터: { [Board!]! }
                    4-4) 검색어와 날짜 범위를 파라미터로 전달할 것.

                5. fetchBoardsCount API
                    5-1) API명: fetchBoardsCount
                    5-2) 요청데이터:
                        endDate: DateTime (선택적)
                        startDate: DateTime (선택적)
                        search: String (선택적)
                    5-3) 응답데이터: Int!
                    5-4) 검색어와 날짜 범위를 파라미터로 전달할 것.
                    5-5) 반환받은 결과를 페이지네이션 계산에 사용할 것.

                6. 검색 상태 관리
                    6-1) 검색어와 날짜 범위는 URL 쿼리 파라미터로 관리할 것.
                    6-2) 페이지 새로고침 시에도 검색 조건이 유지될 것.
                    6-3) 검색 조건이 변경되면 API를 다시 호출할 것.
==============================================
[2차 핵심요구사항]
핵심요구사항) startDate와 endDate가 같은 날짜를 누르면 출력이 되지 않는 상황에 대해서, startDate와 endDate가 같은 날이 선택될 시
endDate를 선택한 endDate날짜의 하루뒤로 API 요청을 보낸 후, 요청을 받은 데이터에서 선택한 날짜까지만 잘라서 화면에 보여줄 것
  	1.	사용자가 같은 날짜를 선택하면:
	•	API 요청 시 endDate를 실제 선택일의 다음날(하루 뒤) 로 보정해서 전송할 것.
  예: startDate = 2025-10-31 endDate = 2025-10-31  →  요청 시 endDate = 2025-11-01
핵심요구사항) 게시글이 1페이지를 넘어가지 않으면, 페이지네이션이 보이지 않는 걸 보이도록 할 것
  	1.	게시글 수(fetchBoardsCount 반환값)가 한 페이지 기준(pageSize) 이하더라도, 페이지네이션 영역(Pagination 컴포넌트)은 항상 표시할 것.
	  2.	단, 페이지 버튼은 1페이지만 활성화되어야 함.

==============================================
[3차 핵심요구사항]

핵심요구사항) lucide-react의 RotateCcw아이콘을 활용해 SearchArea의 가장 왼쪽에 검색 초기화 버튼을 넣을것.
이때, 버튼은 아이콘으로만 이루어질 것. SearchBar의 width값을 reset 버튼 및 gap값만큼 줄일 것.
초기화 버튼의 기능도 작동되도록 할 것. 초기화 버튼에 호버하면 "검색 조건 초기화"라는 정보팁을 줄것. (적당히 실무에서 많이 쓰는 것으로 구현.단, 라이브러리 설치는 하지 말 것.)