아래의 조건을 모두 적용하여, 아래의 요구사항을 모두 구현할 것.
구현 결과를 체크리스트로 반환할 것.

==============================================

조건-커서룰) 아래의 커서룰을 적용하여 작업하고, 이 작업이 끝나면 해당 rules 적용 결과를 체크리스트로 반환할 것.
            - @01-common.mdc
            - @04-func.mdc

==============================================

조건-파일경로) 참고할 API  문서경로: https://main-practice.codebootcamp.co.kr/graphql
조건-파일경로) 참고할 TSX  파일경로: src/components/boards-detail/index.tsx
조건-파일경로) 참고할 CSS  파일경로: src/components/boards-detail/styles.module.css
조건-파일경로) 구현될 HOOK 파일경로: src/components/boards-detail/hooks/index.binding.hook.ts
조건-파일경로) 구현될 TEST 파일경로: src/components/boards-detail/tests/index.binding.hook.spec.ts

==============================================
[1차 핵심요구사항]
핵심요구사항) 다음의 기능을 playwright 테스트를 활용하여 TDD기반으로 구현하고, 테스트에 통과할 때까지 반복할 것.
            1) 테스트 제외 라이브러리
                - jest
                - @testing-library/react

            2) 테스트 조건
                - timeout은 설정하지 않거나, 500ms 미만으로 설정할 것.
                - /diaries 페이지가 완전히 로드된 후 테스트할 것.
                    - 페이지 로드 식별 요구사항: 고정식별자 data-testid 대기 방법
                    - 페이지 로드 식별 금지사항: networkidle 대기 방법

            3) 테스트 API 조건
                3-1) 데이터
                    - 실제데이터를 사용할 것.
                    - Mock데이터 사용하지 말 것.

                3-2) 성공시나리오
                    - API 모킹하지 말 것.
                        - 사용할 email: "a@a.aa"
                        - 사용할 password: "aaaaaaaa8"

                    - fetchBoard API: Board!가 제대로 반환되는지 확인할 것
                    - fetchBoardComments API: [BoardComment!]!가 제대로 반환되는지 확인할 것

                3-3) 실패시나리오
                    - API 모킹할 것.

핵심요구사항) 현재의 모든 구조를 그대로 유지하고, 하드코딩된 Mock데이터를 제거하고, 실제 데이터를 바인딩할 것. 적용 결과를 체크리스트로 반환할 것.
            1) 라이브러리조건
                - API: 이미 설치되어있는 @tanstack/react-query를 사용할 것.
                - 이미 설치되어 있는 codegen을 사용할 것.
                - boards/하위에 graphql폴더를 만들어 사용되는 쿼리 파일을 만든 후 npm run codegen을 사용해 해당 API를 사용할 것.

            2) 바인딩 API를 적용할 것.
                1. fetchBoard API
                    1-1) API명: fetchBoard
                    1-2) 요청데이터: 
                        boardId: ID!
                    1-3) 응답데이터: { Board! }
                        - Board 구조:
                            _id: ID!
                            writer: String
                            title: String!
                            contents: String!
                            youtubeUrl: String
                            likeCount: Int!
                            dislikeCount: Int!
                            images: [String!]
                            boardAddress: BoardAddress
                            user: User
                            createdAt: DateTime!
                            updatedAt: DateTime!
                            deletedAt: DateTime
                    1-4) 반환받은 결과를 해당하는 곳에 지정해 넣을 것.
                    1-5) 주소의 경우, <MapPin/>에 Schadcn의 Tooltip(방향 하단)을 넣어서 구현

                2. fetchBoardComments API
                    2-1) API명: fetchBoardComments
                    2-2) 요청데이터:
                        page: Int
                        boardId: ID!
                    2-3) 응답데이터: { [BoardComment!]! }
                        - BoardComment 구조:
                        _id: ID!
                        writer: String
                        contents: String!
                        rating: Float!
                        user: User
                        createdAt: DateTime!
                        updatedAt: DateTime!
                        deletedAt: DateTime
                    2-4) 반환받은 결과 배열의 길이가 1이상일 경우 댓글 영역에 알맞게 표기. 없다면, 회고가 없다고 표기
==============================================
[2차 핵심요구사항]
핵심요구사항) 반환될 주소가 없을 경우, Tooltip에 "등록된 주소 없음"으로 표기할 것

핵심요구사항) 반환된 유튜브 주소가 없을 경우, videoArea를 띄우지 말 것

핵심요구사항) 반환된 이미지 배열의 길이가 0일 경우, 사진을 띄우지 말 것

핵심요구사항) 반환된 유튜브 주소가 있을 경우, Link를 누르면 유튜브로 이동하게 할 것
    - Link 호버시에 적당하게 할 수 있는 액션을 찾아 실행하기.(Shadcn 라이브러리만 사용)

==============================================
[3차 핵심요구사항]
핵심요구사항) 반환된 유튜브 주소가 있을 경우, youtube videoContainer의 Image를 유튜브 썸네일로 바꾸고, Play 선택 시 재생되게 할 것.

==============================================
[4차 핵심요구사항]
핵심요구사항) 유튜브를 /boards/[id]내에서 재생되게 할 것
==============================================
[5차 핵심요구사항]
핵심요구사항) 로그인 되어 있는 정보를 기반으로 댓글 작성 영역의 작성자 Input에 미리 사용자 정보를 입력되게 한 후, readonly나 disabled 처리할 것.